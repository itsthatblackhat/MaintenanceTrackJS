<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Maintenance Tracker</title>
    <script src="https://cdn.anychart.com/releases/8.12.1/js/anychart-base.min.js"></script>
    <script src="https://cdn.anychart.com/releases/8.12.1/js/anychart-timeline.min.js"></script>
    <style>
        .notification {
            color: red;
            font-weight: bold;
        }
        .color-key {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 10px;
        }
        .color-key div {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        .color-key div span {
            display: inline-block;
            width: 20px;
            height: 20px;
        }
    </style>
</head>
<body>
<h1>Maintenance Tracker</h1>
<form action="/add-site" method="POST">
    <input type="text" name="name" placeholder="Site Name" required>
    <button type="submit">Add Site</button>
</form>
<a href="/manage-sites">Manage Sites</a>
<div class="color-key" id="colorKey"></div>
<div id="container" style="height: 600px;"></div>
<div id="notifications"></div>
<script id="siteData" type="application/json"><%- JSON.stringify(sites) %></script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const jsonData = document.getElementById('siteData').textContent;
        let sites;
        try {
            sites = JSON.parse(jsonData);
        } catch (error) {
            console.error("Error parsing JSON:", error);
            return;
        }

        // Prepare data for the timeline chart
        const rangeData = [];
        const momentData = [];
        const now = new Date();
        const notifications = [];

        sites.forEach(site => {
            site.maintenances.forEach(maintenance => {
                const dueDate = new Date(maintenance.dueDate);
                const lastCompleted = maintenance.lastCompleted ? new Date(maintenance.lastCompleted) : null;

                // Create range series for each maintenance task
                const color = maintenance.status === 'complete' ? 'green' : (dueDate < now ? 'red' : 'blue');
                rangeData.push({
                    name: `${site.name} - Maintenance ${maintenance.id}`,
                    start: Date.UTC(dueDate.getFullYear(), dueDate.getMonth(), dueDate.getDate()),
                    end: Date.UTC(dueDate.getFullYear(), dueDate.getMonth(), dueDate.getDate()),
                    normal: { fill: color },
                    hovered: { fill: color },
                    selected: { fill: color }
                });

                // If maintenance is overdue
                if (dueDate < now && maintenance.status !== 'complete') {
                    notifications.push(`${site.name} - Maintenance ${maintenance.id} is overdue!`);
                    // Mark overdue maintenance on the chart
                    momentData.push({
                        x: Date.UTC(dueDate.getFullYear(), dueDate.getMonth(), dueDate.getDate()),
                        y: `${site.name} - Maintenance ${maintenance.id} Overdue`
                    });
                }

                // Add a moment series for the completion date
                if (lastCompleted) {
                    momentData.push({
                        x: Date.UTC(lastCompleted.getFullYear(), lastCompleted.getMonth(), lastCompleted.getDate()),
                        y: `${site.name} - Maintenance ${maintenance.id} Completed`
                    });
                }
            });
        });

        // Create the chart
        const chart = anychart.timeline();
        const rangeSeries = chart.range(rangeData);
        const momentSeries = chart.moment(momentData);

        // Configure the chart
        chart.container('container');
        chart.draw();

        // Zoom to the current year
        const startOfYear = Date.UTC(now.getFullYear(), 0, 1);
        const endOfYear = Date.UTC(now.getFullYear(), 11, 31);
        chart.zoomTo(startOfYear, endOfYear);

        // Enable zooming in and out
        chart.interactivity().zoomOnMouseWheel(true);

        // Display overdue notifications
        const notificationContainer = document.getElementById('notifications');
        if (notifications.length > 0) {
            notifications.forEach(notification => {
                const div = document.createElement('div');
                div.className = 'notification';
                div.textContent = notification;
                notificationContainer.appendChild(div);
            });
        }
    });
</script>
</body>
</html>
