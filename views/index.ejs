<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Maintenance Tracker</title>
    <script src="https://cdn.anychart.com/releases/8.12.1/js/anychart-base.min.js"></script>
    <script src="https://cdn.anychart.com/releases/8.12.1/js/anychart-timeline.min.js"></script>
    <style>
        .notification {
            color: red;
            font-weight: bold;
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }
        .notification button {
            margin-left: 10px;
        }
        .color-key {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 10px;
        }
        .color-key div {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        .color-key div span {
            display: inline-block;
            width: 20px;
            height: 20px;
        }
    </style>
</head>
<body>
<h1>Maintenance Tracker</h1>
<form action="/add-site" method="POST">
    <input type="text" name="name" placeholder="Site Name" required>
    <button type="submit">Add Site</button>
</form>
<a href="/manage-sites">Manage Sites</a>
<div class="color-key">
    <div><span style="background-color: red; border: 1px solid red;"></span> Overdue</div>
    <div><span style="background-color: yellow; border: 1px solid yellow;"></span> Upcoming</div>
    <div><span style="background-color: green; border: 1px solid green;"></span> Completed</div>
    <div><span style="background-color: blue; border: 1px solid blue;"></span> Not Due</div>
</div>
<div id="container" style="height: 600px;"></div>
<div id="notifications"></div>
<script id="siteData" type="application/json"><%- JSON.stringify(sites) %></script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const jsonData = document.getElementById('siteData').textContent;
        let sites;
        try {
            sites = JSON.parse(jsonData);
            console.log("Parsed site data:", sites);
        } catch (error) {
            console.error("Error parsing JSON:", error);
            return;
        }

        // Prepare data for the timeline chart
        const rangeData = [];
        const momentData = [];
        const now = new Date();
        const notifications = [];

        sites.forEach(site => {
            site.maintenances.forEach(maintenance => {
                const dueDate = new Date(maintenance.dueDate);
                const lastCompleted = maintenance.lastCompleted ? new Date(maintenance.lastCompleted) : null;
                const nextDueDate = maintenance.nextDueDate ? new Date(maintenance.nextDueDate) : null;

                console.log("Processing maintenance:", maintenance);
                console.log("Due date:", dueDate, "Now:", now);

                // Determine color based on status and due date
                let color, strokeColor;
                if (maintenance.status === 'complete') {
                    color = 'green';
                    strokeColor = 'green';
                    momentData.push({
                        x: Date.UTC(lastCompleted.getFullYear(), lastCompleted.getMonth(), lastCompleted.getDate()),
                        y: `${site.name} - Maintenance ${maintenance.id} Completed`,
                        marker: { fill: 'green', size: 10, type: 'circle', stroke: { color: 'green', thickness: 2 } }
                    });
                } else if (dueDate < now) {
                    color = 'red';
                    strokeColor = 'red';
                    notifications.push({ site, maintenance, message: `${site.name} - Maintenance ${maintenance.id} is overdue!` });
                    momentData.push({
                        x: Date.UTC(dueDate.getFullYear(), dueDate.getMonth(), dueDate.getDate()),
                        y: `${site.name} - Maintenance ${maintenance.id} Overdue`,
                        marker: { fill: 'red', size: 10, type: 'circle', stroke: { color: 'red', thickness: 2 } }
                    });
                } else if (dueDate > now) {
                    color = 'yellow';
                    strokeColor = 'yellow';
                    momentData.push({
                        x: Date.UTC(dueDate.getFullYear(), dueDate.getMonth(), dueDate.getDate()),
                        y: `${site.name} - Maintenance ${maintenance.id} Upcoming`,
                        marker: { fill: 'yellow', size: 10, type: 'circle', stroke: { color: 'yellow', thickness: 2 } }
                    });
                    console.log("Upcoming maintenance detected:", maintenance);
                } else {
                    color = 'blue';
                    strokeColor = 'blue';
                }

                rangeData.push({
                    name: `${site.name} - Maintenance ${maintenance.id}`,
                    start: Date.UTC(dueDate.getFullYear(), dueDate.getMonth(), dueDate.getDate()),
                    end: Date.UTC(dueDate.getFullYear(), dueDate.getMonth(), dueDate.getDate()),
                    normal: { fill: color, stroke: { color: strokeColor, thickness: 2 } },
                    hovered: { fill: color, stroke: { color: strokeColor, thickness: 2 } },
                    selected: { fill: color, stroke: { color: strokeColor, thickness: 2 } }
                });

                // Add a moment series for the completion date
                if (lastCompleted) {
                    momentData.push({
                        x: Date.UTC(lastCompleted.getFullYear(), lastCompleted.getMonth(), lastCompleted.getDate()),
                        y: `${site.name} - Maintenance ${maintenance.id} Completed`,
                        marker: { fill: 'green', size: 10, type: 'circle', stroke: { color: 'green', thickness: 2 } }
                    });
                }
            });
        });

        console.log("Range data prepared:", rangeData);
        console.log("Moment data prepared:", momentData);

        // Create the chart
        const chart = anychart.timeline();
        const rangeSeries = chart.range(rangeData);
        const momentSeries = chart.moment(momentData);

        // Configure the chart
        chart.container('container');
        chart.draw();

        // Zoom to the current year
        const startOfYear = Date.UTC(now.getFullYear(), 0, 1);
        const endOfYear = Date.UTC(now.getFullYear(), 11, 31);
        chart.zoomTo(startOfYear, endOfYear);

        // Enable zooming in and out
        chart.interactivity().zoomOnMouseWheel(true);

        // Display overdue notifications
        const notificationContainer = document.getElementById('notifications');
        if (notifications.length > 0) {
            notifications.forEach(notification => {
                const div = document.createElement('div');
                div.className = 'notification';
                div.innerHTML = `${notification.message} &#10060;`; // Red X emoji

                const button = document.createElement('button');
                button.textContent = 'Job Completed';
                button.addEventListener('click', () => {
                    completeJob(notification.site, notification.maintenance);
                });
                div.appendChild(button);

                notificationContainer.appendChild(div);
            });
        }

        function completeJob(site, maintenance) {
            // Update the maintenance status to complete
            maintenance.status = 'complete';
            maintenance.lastCompleted = new Date().toISOString();

            // Update the site data in the database
            fetch('/update-maintenance-status', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ siteId: site.id, maintenanceId: maintenance.id, status: 'complete' })
            }).then(response => response.json()).then(data => {
                if (data.success) {
                    // Reload the page to reflect the changes
                    location.reload();
                } else {
                    console.error('Failed to update the site');
                }
            }).catch(error => {
                console.error('Error:', error);
            });
        }
    });
</script>
</body>
</html>
